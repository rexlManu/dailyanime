{"version":3,"sources":["graphql.js","App.js","reportWebVitals.js","index.js"],"names":["SELECT_MEDIAS","range","start","end","Array","map","_","i","MediaCard","id","nextAiringEpisode","title","coverImage","className","moment","airingAt","format","href","target","rel","userPreferred","episode","src","large","alt","SkeletonMediaCard","CalenderDay","day","cards","medias","filter","media","startTime","endTime","sort","a","b","length","forEach","push","time","name","App","useState","setMedias","weekDay","add","startOf","valueOf","endOf","days","useEffect","page","fetch","method","headers","Accept","body","JSON","stringify","query","variables","type","status","response","json","data","Page","pageInfo","concat","lastPage","fetchData","props","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85fbe6c8.chunk.js","sourcesContent":["const SELECT_MEDIAS = `\r\nquery(\r\n\t$page: Int = 1\r\n\t$id: Int\r\n\t$type: MediaType\r\n\t$isAdult: Boolean = false\r\n\t$search: String\r\n\t$format: [MediaFormat]\r\n\t$status: MediaStatus\r\n\t$countryOfOrigin: CountryCode\r\n\t$source: MediaSource\r\n\t$season: MediaSeason\r\n\t$seasonYear: Int\r\n\t$year: String\r\n\t$onList: Boolean\r\n\t$yearLesser: FuzzyDateInt\r\n\t$yearGreater: FuzzyDateInt\r\n\t$episodeLesser: Int\r\n\t$episodeGreater: Int\r\n\t$durationLesser: Int\r\n\t$durationGreater: Int\r\n\t$chapterLesser: Int\r\n\t$chapterGreater: Int\r\n\t$volumeLesser: Int\r\n\t$volumeGreater: Int\r\n\t$licensedBy: [String]\r\n\t$isLicensed: Boolean\r\n\t$genres: [String]\r\n\t$excludedGenres: [String]\r\n\t$tags: [String]\r\n\t$excludedTags: [String]\r\n\t$minimumTagRank: Int\r\n\t$sort: [MediaSort] = [POPULARITY_DESC, SCORE_DESC]\r\n) {\r\n\tPage(page: $page, perPage: 1000) {\r\n\t\tpageInfo {\r\n\t\t\ttotal\r\n\t\t\tperPage\r\n\t\t\tcurrentPage\r\n\t\t\tlastPage\r\n\t\t\thasNextPage\r\n\t\t}\r\n\t\tmedia(\r\n\t\t\tid: $id\r\n\t\t\ttype: $type\r\n\t\t\tseason: $season\r\n\t\t\tformat_in: $format\r\n\t\t\tstatus: $status\r\n\t\t\tcountryOfOrigin: $countryOfOrigin\r\n\t\t\tsource: $source\r\n\t\t\tsearch: $search\r\n\t\t\tonList: $onList\r\n\t\t\tseasonYear: $seasonYear\r\n\t\t\tstartDate_like: $year\r\n\t\t\tstartDate_lesser: $yearLesser\r\n\t\t\tstartDate_greater: $yearGreater\r\n\t\t\tepisodes_lesser: $episodeLesser\r\n\t\t\tepisodes_greater: $episodeGreater\r\n\t\t\tduration_lesser: $durationLesser\r\n\t\t\tduration_greater: $durationGreater\r\n\t\t\tchapters_lesser: $chapterLesser\r\n\t\t\tchapters_greater: $chapterGreater\r\n\t\t\tvolumes_lesser: $volumeLesser\r\n\t\t\tvolumes_greater: $volumeGreater\r\n\t\t\tlicensedBy_in: $licensedBy\r\n\t\t\tisLicensed: $isLicensed\r\n\t\t\tgenre_in: $genres\r\n\t\t\tgenre_not_in: $excludedGenres\r\n\t\t\ttag_in: $tags\r\n\t\t\ttag_not_in: $excludedTags\r\n\t\t\tminimumTagRank: $minimumTagRank\r\n\t\t\tsort: $sort\r\n\t\t\tisAdult: $isAdult\r\n\t\t) {\r\n\t\t\tid\r\n\t\t\ttitle {\r\n\t\t\t\tuserPreferred\r\n\t\t\t}\r\n\t\t\tcoverImage {\r\n\t\t\t\textraLarge\r\n\t\t\t\tlarge\r\n\t\t\t\tcolor\r\n\t\t\t}\r\n\t\t\tstartDate {\r\n\t\t\t\tyear\r\n\t\t\t\tmonth\r\n\t\t\t\tday\r\n\t\t\t}\r\n\t\t\tendDate {\r\n\t\t\t\tyear\r\n\t\t\t\tmonth\r\n\t\t\t\tday\r\n\t\t\t}\r\n\t\t\tbannerImage\r\n\t\t\tseason\r\n\t\t\tdescription\r\n\t\t\ttype\r\n\t\t\tformat\r\n\t\t\tstatus(version: 2)\r\n\t\t\tepisodes\r\n\t\t\tduration\r\n\t\t\tchapters\r\n\t\t\tvolumes\r\n\t\t\tgenres\r\n\t\t\tisAdult\r\n\t\t\taverageScore\r\n\t\t\tpopularity\r\n\t\t\tnextAiringEpisode {\r\n        id\r\n\t\t\t\tairingAt\r\n\t\t\t\ttimeUntilAiring\r\n\t\t\t\tepisode\r\n\t\t\t}\r\n\t\t\tmediaListEntry {\r\n\t\t\t\tid\r\n\t\t\t\tstatus\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n`;\r\n\r\nexport { SELECT_MEDIAS };\r\n","import moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { SELECT_MEDIAS } from \"./graphql\";\n// import output from \"./output.json\";\n\nvar range = (start, end) =>\n  [...Array(end - start + 1)].map((_, i) => start + i);\n\nfunction App() {\n  const [medias, setMedias] = useState([]);\n  const [days] = useState(\n    range(0, 6).map((i) => {\n      const weekDay = moment().add(i, \"d\");\n      return {\n        time: weekDay,\n        startTime: weekDay.startOf(\"day\").valueOf(),\n        endTime: weekDay.endOf(\"day\").valueOf(),\n        name: weekDay.format(\"ddd\"),\n      };\n    })\n  );\n  useEffect(() => {\n    async function fetchData() {\n      let medias = [];\n      let page = 1;\n      while (true) {\n        const response = await fetch(\"https://graphql.anilist.co\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n          },\n          body: JSON.stringify({\n            query: SELECT_MEDIAS,\n            variables: { page: page, type: \"ANIME\", status: \"RELEASING\" },\n          }),\n        });\n        const data = await response.json();\n        const { pageInfo, media } = data.data.Page;\n        medias = medias.concat(media);\n        if (pageInfo.lastPage === page) break;\n        page++;\n      }\n      setMedias(medias);\n      // setMedias(output);\n    }\n\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"min-h-screen lg:h-screen bg-gray-900 antialiased flex flex-col\">\n      <div className=\"bg-gray-800 \">\n        <div className=\"container mx-auto\">\n          <div className=\"flex flex-row items-center py-3 justify-end px-4 lg:px-0\">\n            <a\n              className=\"hover:text-white text-xl text-gray-200\"\n              href=\"https://github.com/rexlManu/dailyanime\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Github\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"grid sm:grid-cols-4 grid-cols-3 lg:flex flex-row flex-1 lg:overflow-hidden max-w-[1870px] mx-auto\">\n        {days.map((day) => {\n          const props = { day, medias };\n          return <CalenderDay {...props} />;\n        })}\n      </div>\n    </div>\n  );\n}\n\nfunction MediaCard({ id, nextAiringEpisode, title, coverImage }) {\n  return (\n    <div className=\"flex flex-col px-4 py-2\">\n      <p className=\"text-gray-300 text-sm\">\n        {moment(nextAiringEpisode.airingAt * 1000).format(\"h:mm a\")}\n      </p>\n      <h3 className=\"uppercase text-blue-500 text-xl leading-5 py-1 hover:text-blue-400\">\n        <a\n          href={\"https://anilist.co/anime/\" + id}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          {title.userPreferred}\n        </a>\n      </h3>\n      <p className=\"text-blue-500 text-lg pb-2\">\n        Episode {nextAiringEpisode.episode}\n      </p>\n      <img className=\"rounded\" src={coverImage.large} alt=\"\" />\n    </div>\n  );\n}\n\nfunction SkeletonMediaCard() {\n  return (\n    <div className=\"flex flex-col px-4 py-2 animate-pulse\">\n      <p className=\"text-gray-300 text-sm w-16 h-4 bg-gray-700 rounded\"></p>\n      <h3 className=\"uppercase text-blue-500 text-xl leading-5 my-2 hover:text-blue-400 cursor-default w-32 h-7 bg-gray-700 rounded\">\n        <a target=\"_blank\" rel=\"noreferrer\"></a>\n      </h3>\n      <p className=\"text-blue-500 text-lg mb-2 w-24 h-6 bg-gray-700 rounded\"></p>\n      <div className=\"w-full h-56 w-[200px] bg-gray-700 rounded\"></div>\n    </div>\n  );\n}\n\nfunction CalenderDay({ day, medias }) {\n  let cards = medias\n    .filter(\n      (media) =>\n        media.nextAiringEpisode &&\n        media.nextAiringEpisode.airingAt * 1000 > day.startTime &&\n        media.nextAiringEpisode.airingAt * 1000 < day.endTime\n    )\n    .sort((a, b) => a.nextAiringEpisode.airingAt - b.nextAiringEpisode.airingAt)\n    .map((media) => <MediaCard {...media} />);\n  if (cards.length === 0) {\n    // fill with skeleton\n    cards = [];\n    range(0, 10).forEach(() => cards.push(<SkeletonMediaCard />));\n  }\n  return (\n    <div className=\"flex flex-col space-y-4 lg:flex-1 flex-shrink-0 overflow-hidden\">\n      <div className=\"text-center py-6 flex-shrink\">\n        <p className=\"text-gray-300 text-sm\">{day.time.format(\"M/D\")}</p>\n        <h2 className=\"text-3xl font-medium text-blue-500\">{day.name}</h2>\n      </div>\n      <div className=\"h-96 lg:h-auto flex flex-col space-y-2 divide-y divide-gray-800 scrollbar-thin scrollbar-thumb-gray-800 scrollbar-track-gray-700\">\n        {cards}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}